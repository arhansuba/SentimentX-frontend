import React, { useMemo } from 'react';
import { Vulnerability } from './ContractAnalysis';

interface VulnerabilityChartProps {
  vulnerabilities: Vulnerability[];
  vulnerabilityTypes?: {[key: string]: number};
}

const VulnerabilityChart: React.FC<VulnerabilityChartProps> = ({ 
  vulnerabilities,
  vulnerabilityTypes
}) => {
  const chartData = useMemo(() => {
    // If pre-computed types are provided, use those
    if (vulnerabilityTypes) {
      return Object.entries(vulnerabilityTypes)
        .map(([type, count]) => ({ type, count }))
        .sort((a, b) => b.count - a.count);
    }
    
    // Otherwise calculate from vulnerabilities
    const types: {[key: string]: number} = {};
    
    vulnerabilities.forEach(vuln => {
      types[vuln.type] = (types[vuln.type] || 0) + 1;
    });
    
    return Object.entries(types)
      .map(([type, count]) => ({ type, count }))
      .sort((a, b) => b.count - a.count);
  }, [vulnerabilities, vulnerabilityTypes]);

  const riskLevelCounts = useMemo(() => {
    const counts: {[key: string]: number} = {
      'critical': 0,
      'high': 0,
      'medium': 0,
      'low': 0,
    };
    
    vulnerabilities.forEach(vuln => {
      const level = vuln.risk_level.toLowerCase();
      if (counts[level] !== undefined) {
        counts[level] += 1;
      }
    });
    
    return counts;
  }, [vulnerabilities]);

  const getRiskLevelColor = (level: string) => {
    switch (level.toLowerCase()) {
      case 'critical':
        return 'bg-red-500';
      case 'high':
        return 'bg-orange-500';
      case 'medium':
        return 'bg-yellow-500';
      case 'low':
        return 'bg-green-500';
      default:
        return 'bg-gray-500';
    }
  };
  
  const getBarColor = (index: number) => {
    const colors = [
      'bg-blue-500',
      'bg-indigo-500',
      'bg-purple-500',
      'bg-pink-500',
      'bg-red-500',
      'bg-orange-500',
      'bg-yellow-500',
      'bg-green-500',
      'bg-teal-500',
      'bg-cyan-500',
    ];
    
    return colors[index % colors.length];
  };

  const maxCount = Math.max(...chartData.map(item => item.count), 1);

  return (
    <div className="space-y-8">
      {/* Risk Level Distribution */}
      <div>
        <h4 className="text-md font-medium mb-3">Risk Level Distribution</h4>
        <div className="grid grid-cols-4 gap-4">
          {Object.entries(riskLevelCounts).map(([level, count]) => (
            <div key={level} className="flex flex-col items-center">
              <div className={`w-16 h-16 rounded-full flex items-center justify-center text-white font-semibold ${getRiskLevelColor(level)}`}>
                {count}
              </div>
              <span className="mt-2 capitalize">{level}</span>
            </div>
          ))}
        </div>
      </div>
      
      {/* Vulnerability Type Bar Chart */}
      <div>
        <h4 className="text-md font-medium mb-3">Vulnerability Types</h4>
        <div className="space-y-3 max-h-80 overflow-y-auto pr-2">
          {chartData.map((item, index) => (
            <div key={item.type} className="flex flex-col">
              <div className="flex justify-between mb-1">
                <span className="text-sm font-medium">{item.type}</span>
                <span className="text-sm font-medium">{item.count}</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-4">
                <div 
                  className={`h-4 rounded-full ${getBarColor(index)}`}
                  style={{ width: `${(item.count / maxCount) * 100}%` }}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      {/* Recommendations Summary */}
      {vulnerabilities.length > 0 && (
        <div className="mt-6 p-4 bg-gray-50 rounded-md">
          <h4 className="text-md font-medium mb-2">Security Recommendations</h4>
          <ul className="list-disc list-inside space-y-2">
            {Array.from(new Set(vulnerabilities.map(v => v.recommendation)))
              .slice(0, 5)
              .map((recommendation, index) => (
                <li key={index} className="text-sm">
                  {recommendation}
                </li>
            ))}
            {vulnerabilities.length > 5 && (
              <li className="text-sm font-medium">
                And {vulnerabilities.length - 5} more recommendations...
              </li>
            )}
          </ul>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityChart;