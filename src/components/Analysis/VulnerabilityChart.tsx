import React from 'react';

interface VulnerabilityChartProps {
  criticalCount: number;
  highCount: number;
  mediumCount: number;
  lowCount: number;
}

const VulnerabilityChart: React.FC<VulnerabilityChartProps> = ({
  criticalCount,
  highCount,
  mediumCount,
  lowCount
}) => {
  const total = criticalCount + highCount + mediumCount + lowCount;
  
  // If no vulnerabilities, show a safe chart
  if (total === 0) {
    return (
      <div className="flex flex-col items-center justify-center">
        <div className="relative w-48 h-48">
          <svg viewBox="0 0 100 100" className="w-full h-full">
            <circle
              cx="50"
              cy="50"
              r="45"
              fill="none"
              stroke="#e5e7eb"
              strokeWidth="8"
            />
            <circle
              cx="50"
              cy="50"
              r="45"
              fill="none"
              stroke="#10b981"
              strokeWidth="8"
              strokeDasharray="283"
              strokeDashoffset="0"
              className="transform -rotate-90 origin-center transition-all duration-1000"
            />
          </svg>
          <div className="absolute inset-0 flex flex-col items-center justify-center">
            <span className="text-4xl font-bold text-green-500">Safe</span>
            <span className="text-sm text-gray-500">No vulnerabilities</span>
          </div>
        </div>
        <div className="mt-4 w-full max-w-xs">
          <p className="text-center text-sm text-gray-600">
            No vulnerabilities were detected in this contract.
          </p>
        </div>
      </div>
    );
  }

  // Calculate percentages for chart
  const criticalPercentage = (criticalCount / total) * 100;
  const highPercentage = (highCount / total) * 100;
  const mediumPercentage = (mediumCount / total) * 100;
  const lowPercentage = (lowCount / total) * 100;
  
  // Calculate stroke-dashoffset for SVG circle segments
  const calculateOffset = (percent: number, previousPercent: number) => {
    const circumference = 2 * Math.PI * 45;
    const offset = circumference * (1 - previousPercent / 100);
    return offset;
  };

  return (
    <div className="flex flex-col items-center justify-center">
      <div className="relative w-48 h-48">
        <svg viewBox="0 0 100 100" className="w-full h-full">
          {/* Background circle */}
          <circle
            cx="50"
            cy="50"
            r="45"
            fill="none"
            stroke="#e5e7eb"
            strokeWidth="8"
          />
          
          {/* Critical vulnerabilities (red) */}
          {criticalCount > 0 && (
            <circle
              cx="50"
              cy="50"
              r="45"
              fill="none"
              stroke="#dc2626"
              strokeWidth="8"
              strokeDasharray="283"
              strokeDashoffset={calculateOffset(criticalPercentage, 0)}
              className="transform -rotate-90 origin-center transition-all duration-1000"
            />
          )}
          
          {/* High vulnerabilities (orange) */}
          {highCount > 0 && (
            <circle
              cx="50"
              cy="50"
              r="45"
              fill="none"
              stroke="#f97316"
              strokeWidth="8"
              strokeDasharray="283"
              strokeDashoffset={calculateOffset(highPercentage, criticalPercentage)}
              className="transform -rotate-90 origin-center transition-all duration-1000"
            />
          )}
          
          {/* Medium vulnerabilities (yellow) */}
          {mediumCount > 0 && (
            <circle
              cx="50"
              cy="50"
              r="45"
              fill="none"
              stroke="#eab308"
              strokeWidth="8"
              strokeDasharray="283"
              strokeDashoffset={calculateOffset(mediumPercentage, criticalPercentage + highPercentage)}
              className="transform -rotate-90 origin-center transition-all duration-1000"
            />
          )}
          
          {/* Low vulnerabilities (blue) */}
          {lowCount > 0 && (
            <circle
              cx="50"
              cy="50"
              r="45"
              fill="none"
              stroke="#3b82f6"
              strokeWidth="8"
              strokeDasharray="283"
              strokeDashoffset={calculateOffset(lowPercentage, criticalPercentage + highPercentage + mediumPercentage)}
              className="transform -rotate-90 origin-center transition-all duration-1000"
            />
          )}
        </svg>
        
        <div className="absolute inset-0 flex flex-col items-center justify-center">
          <span className="text-4xl font-bold">{total}</span>
          <span className="text-sm text-gray-500">Vulnerabilities</span>
        </div>
      </div>
      
      <div className="mt-6 grid grid-cols-2 gap-4 w-full">
        <div className="flex items-center">
          <div className="w-4 h-4 rounded-full bg-red-600 mr-2"></div>
          <span>Critical: {criticalCount}</span>
        </div>
        <div className="flex items-center">
          <div className="w-4 h-4 rounded-full bg-orange-500 mr-2"></div>
          <span>High: {highCount}</span>
        </div>
        <div className="flex items-center">
          <div className="w-4 h-4 rounded-full bg-yellow-500 mr-2"></div>
          <span>Medium: {mediumCount}</span>
        </div>
        <div className="flex items-center">
          <div className="w-4 h-4 rounded-full bg-blue-500 mr-2"></div>
          <span>Low: {lowCount}</span>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityChart;